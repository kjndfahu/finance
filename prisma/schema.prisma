generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())

  login       String @unique
  name        String
  surname     String
  email       String @unique
  telegramId  String
  phoneNumber String
  region      String
  password    String

  role         Role   @default(USER)
  referralCode String @unique
  balance      Float  @default(0)

  referral           Referrals[]
  operations         OperationsHistory?
  topupoperations    TopUpOperations[]
  requesttopup       TopUpRequest[]
  deposits           Deposits[]
  withdrawrequest    WithdrawRequest[]
  withdrawoperations WithdrawOperations[]
  withdrawodeclined  WithdrawDeclined[]
  topupdeclined      TopUpDeclined[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Referrals {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  totalAmount    Float @default(0)
  totalReferrals Int   @default(0)
  totalProfit    Float @default(0)
  referredBy     Int?
  typeofline     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OperationsHistory {
  id Int @id @default(autoincrement())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  withdraws         WithdrawOperations[]
  withdrawsdeclined WithdrawDeclined[]
  topups            TopUpDeclined[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TopUpOperations {
  id Int @id @default(autoincrement())

  sum Float

  email  String
  user   User?          @relation(fields: [email], references: [email], onDelete: Cascade)
  status WithdrawStatus @default(APPROVED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WithdrawOperations {
  id Int @id @default(autoincrement())

  sum Float

  email  String
  user   User?          @relation(fields: [email], references: [email], onDelete: Cascade)
  status WithdrawStatus @default(APPROVED)

  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  OperationsHistory   OperationsHistory? @relation(fields: [operationsHistoryId], references: [id])
  operationsHistoryId Int?
}

model WithdrawDeclined {
  id Int @id @default(autoincrement())

  sum Float

  email  String
  user   User?          @relation(fields: [email], references: [email], onDelete: Cascade)
  status WithdrawStatus @default(REJECTED)

  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  OperationsHistory   OperationsHistory? @relation(fields: [operationsHistoryId], references: [id])
  operationsHistoryId Int?
}

model TopUpDeclined {
  id Int @id @default(autoincrement())

  sum Int

  email  String
  user   User?          @relation(fields: [email], references: [email], onDelete: Cascade)
  status WithdrawStatus @default(REJECTED)

  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  OperationsHistory   OperationsHistory? @relation(fields: [operationsHistoryId], references: [id], onDelete: Cascade)
  operationsHistoryId Int?
}

model BankingDetails {
  id      Int    @id @default(autoincrement())
  name    String
  details String
}

model TopUpRequest {
  id Int @id @default(autoincrement())

  email  String
  user   User?          @relation(fields: [email], references: [email], onDelete: Cascade)
  type   String
  sum    Float
  status WithdrawStatus @default(INPROCESSING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Deposits {
  id          Int      @id @default(autoincrement())
  login       String
  balance     Int
  depositSum  String
  earning     Float
  percent     String
  withdrawSum Float
  endDate     DateTime
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
}

model WithdrawRequest {
  id             Int            @id @default(autoincrement())
  email          String
  method         String
  amount         Float
  paymentDetails String
  status         WithdrawStatus @default(INPROCESSING)

  user User? @relation(fields: [email], references: [email], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DepositStatus {
  INWORK
  FINISHED
}

enum Role {
  USER
  ADMIN
}

enum WithdrawStatus {
  APPROVED
  INPROCESSING
  REJECTED
}
